# -*- coding: utf-8 -*-
"""Bilyoner.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12bVt6QNTXS4dcjif7R0ItBev7sphAepY
"""

import pywt
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
#import pandas_datareader
from pandas_datareader import data as pdr

from sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn import model_selection, tree, preprocessing, metrics, linear_model
from sklearn.metrics import r2_score
from sklearn.model_selection import GridSearchCV
import keras
import tensorflow as tf
from keras.preprocessing.sequence import TimeseriesGenerator
from keras.models import Sequential
from keras.layers import LSTM, Dense,Dropout,RepeatVector, TimeDistributed, SimpleRNN
from keras.models import load_model
from math import sqrt
from pandas import read_csv
from sklearn.metrics import mean_squared_error, explained_variance_score, mean_absolute_error, mean_squared_log_error
from matplotlib import pyplot
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import RepeatVector
from keras.layers import TimeDistributed
from keras.layers import Conv1D, MaxPooling1D, Flatten, ConvLSTM2D
import keras.backend as K
from scipy.stats.stats import pearsonr
import catboost
from catboost import CatBoostRegressor, Pool
import xgboost as xg
from sklearn.linear_model import ElasticNet
from sklearn.linear_model import Lars
from sklearn.linear_model import SGDRegressor
from sklearn.linear_model import HuberRegressor
from sklearn.linear_model import RANSACRegressor
from sklearn import svm
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import BaggingRegressor
from sklearn.ensemble import AdaBoostRegressor
from sklearn.ensemble import VotingRegressor
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from xgboost import XGBRegressor
from sklearn.linear_model import Lasso
from sklearn.model_selection import KFold
from sklearn.model_selection import RandomizedSearchCV, GridSearchCV
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.neural_network import MLPRegressor
lr = LinearRegression()
en = ElasticNet(alpha=0.1, l1_ratio=0.5)
lar = Lars()
sgd = SGDRegressor()
h = HuberRegressor(max_iter=1000)
#ransac = RANSACRegressor()
svr = svm.SVR(C=0.99)
rf = RandomForestRegressor(n_estimators=1000)
dt = DecisionTreeRegressor(min_samples_leaf=5)
xg = XGBRegressor(verbosity=0)
las = Lasso()
gb = GradientBoostingRegressor(random_state=1, verbose=0)
#mlpr = MLPRegressor(hidden_layer_sizes=[32,32,32], learning_rate='adaptive', early_stopping=True)
cat = CatBoostRegressor(loss_function='RMSE', verbose=0)
#ada = AdaBoostRegressor(base_estimator=rf)
bag = BaggingRegressor(base_estimator=rf)
knr = KNeighborsRegressor(n_neighbors=3)

models = [lr, en,lar,sgd,h,ransac,svr,ada,rf,dt,las,gb,mlpr,cat,bag,knr]
##


##

def plot_series(time, series, format="-", start=0, end=None):
    #plt.figure(figsize=(12,8))
    plt.plot(time[start:end], series[start:end], format)
    #plt.yticks([0, 1, 2], ['January', 'February', 'March'])
    plt.xlabel("Time")
    plt.ylabel("Value")
    plt.grid(True)
def split_dataset(data):
    # split into standard weeks
    train, test = data[1:-len(x_train)], data[len(x_train):-6]
    train = np.array(np.split(train, float(len(train))/7))
    test = np.array(np.split(test, float(len(test)) / 7))
    return train, test
def to_supervised(train, n_input, n_out):
    # flatten data
    data = train.reshape((train.shape[0]*train.shape[1], train.shape[2]))
    X, y = list(), list()
    in_start = 0
    # step over the entire history one time step at a time
    for _ in range(len(data)):
    # define the end of the input sequence
        in_end = in_start + n_input
        out_end = in_end + n_out
        # ensure we have enough data for this instance
        if out_end < len(data):
            x_input = data[in_start:in_end, 0]
            x_input = x_input.reshape((len(x_input), 1))
            X.append(x_input)
            y.append(data[in_end:out_end, 0])
        # move along one time step
        in_start += 1
    return np.array(X), np.array(y)
def build_model(train, n_input):
    # prepare data
    train_x, train_y = to_supervised(train, n_input,n_out)
    # define parameters
    verbose, epochs, batch_size = 1, 10, 16
    n_timesteps, n_features, n_outputs = train_x.shape[1], train_x.shape[2], train_y.shape[1]
    # reshape output into [samples, timesteps, features]
    train_y = train_y.reshape((train_y.shape[0], train_y.shape[1], 1))
    # define model
    model = Sequential()
    model.add(LSTM(10, activation= 'relu' , input_shape=(n_timesteps, n_features)))
    model.add(RepeatVector(n_outputs))
    model.add(LSTM(10, activation= 'relu' , return_sequences=True))
    model.add(TimeDistributed(Dense(10, activation= 'relu' )))
    model.add(TimeDistributed(Dense(1)))
    model.compile(loss= 'mse' , optimizer= 'adam' )
    # fit network
    model.fit(train_x, train_y, epochs=epochs, batch_size=batch_size, verbose=verbose)
    return model
def not_build_model(train, n_input):
# prepare data
    train_x, train_y = to_supervised(train, n_input,n_out)
    # define parameters
    verbose, epochs, batch_size = 1, 10, 16
    n_timesteps, n_features, n_outputs = train_x.shape[1], train_x.shape[2], train_y.shape[1]
    # define model
    model = Sequential()
    model.add(LSTM(10, activation= 'relu' , input_shape=(n_timesteps, n_features)))
    model.add(Dense(10, activation= 'relu' ))
    model.add(Dense(n_outputs))
    model.compile(loss= 'mse' , optimizer= 'adam' )
    # fit network
    model.fit(train_x, train_y, epochs=epochs, batch_size=batch_size, verbose=verbose)
    return model
def evaluate_forecasts(actual, predicted):
    scores = list()
# calculate an RMSE score for each day
    for i in range(actual.shape[1]):
    # calculate mse
        mse = mean_squared_error(actual[:, i], predicted[:, i])
        # calculate rmse
        rmse = np.sqrt(mse)
        # store
        scores.append(rmse)
        # calculate overall RMSE
    s = 0
    for row in range(actual.shape[0]):
        for col in range(actual.shape[1]):
            s += (actual[row, col] - predicted[row, col])**2
    score = np.sqrt(s / (actual.shape[0] * actual.shape[1]))
    return score, scores
def summarize_scores(name, score, scores):
    s_scores = ' , ' .join([ ' %.1f ' % s for s in scores])
    print( ' %s: [%.3f] %s ' % (name, score, s_scores))
def forecast(model, history, n_input):
# flatten data
    data = np.array(history)
    data = data.reshape((data.shape[0]*data.shape[1], data.shape[2]))
    # retrieve last observations for input data
    input_x = data[-n_input:, 0]
    # reshape into [1, n_input, 1]
    input_x = input_x.reshape((1, len(input_x), 1))
    # forecast the next week
    yhat = model.predict(input_x, verbose=0)
    # we only want the vector forecast
    yhat = yhat[0]
    return yhat
def evaluate_model(train, test, n_input):
# fit model
    model = build_model(train, n_input)
    # history is a list of weekly data
    history = [x for x in train]
    # walk-forward validation over each week
    predictions = list()
    for i in range(len(test)):
    # predict the week
        yhat_sequence = forecast(model, history, n_input)
        # store the predictions
        predictions.append(yhat_sequence)
        # get real observation and add to history for predicting the next week
        history.append(test[i, :])
    # evaluate predictions days for each week
    predictions = np.array(predictions)
    score, scores = evaluate_forecasts(test[:, :, 0], predictions)
    return score, scores
def make_3d(x,timesteps,n_features=1):
    #[sample, timesteps, features]
    return x.reshape((int(len(x)/timesteps),timesteps,n_features))
def make_2d(x):
    return x.reshape((x.shape[0]* x.shape[1] ,x.shape[2]))
def running_mean(x, N):
        cumsum = np.cumsum(np.insert(x, 0, 0))
        return (cumsum[N:] - cumsum[:-N]) / float(N)
def runningmeanFast(x, N):
    return np.convolve(x, np.ones((N,)) / N)[(N - 1):]
def make_5d(x,n_steps,n_length, n_features=1):
    #n_steps = timesteps = t = SUBSEQUENCE SAYISI
    #n_length = columns = x/n_steps = SUBSEQ UZUNLUÄžU
    #[samples, timesteps, rows, cols, channels].
    #return x.reshape((x.shape[0], n_steps, 1, n_length, n_features))
    #return x.reshape((int(x.shape[0]/n_steps), n_steps, 1, n_length, n_features))
    return x.reshape((x.shape[0], n_steps, 1, n_length, n_features))
def diff(x):
    l = []
    for i in range(1,len(x)-1):
        l.append(x[i] - x[i-1])
    return l
def myloss(true, pred):
    d1 = diff(true)
    d2 = diff(pred)
#    squared_difference = tf.square(d1 - d2)
    squared_difference =tf.square(tf.subtract(diff(series),diff(time)))
    loss = tf.reduce_mean(squared_difference, axis=-1)
    return loss
def denoise(x,y):
    (ca, cd) = pywt.dwt(x, "haar")
    cat = pywt.threshold(ca, y * np.std(ca), mode="soft")
    cdt = pywt.threshold(cd, y * np.std(cd), mode="soft")
    tx = pywt.idwt(cat, cdt, "haar")
    return tx
def rmspe(y_true, y_pred):
    '''
    Compute Root Mean Square Percentage Error between two arrays.
    '''
    loss = np.sqrt(np.mean(np.square(((y_true - y_pred) / y_true)), axis=0))

    return loss
def ml(model):
    tf.keras.backend.clear_session()
    tf.random.set_seed(7)
    np.random.seed(7)
    print('fit1/4')
    verbose, epochs, batch_size = 1, 100, 10
    history = model.fit(train_x_2d, train_y_2d)
    last_window1 = train_y.reshape((800,50))[750:]
    prediction_scaled = model.predict(last_window1)
    #np.append(x_train_scaled_3d[16],x_train_scaled_3d[17])
    #np.append(x_train_val[-window_size+i:],forecast[:i])[np.newaxis]

    prediction_2d = sc.inverse_transform(prediction_scaled.reshape((-1,1)))

    #prediction_2d = prediction_scaled.reshape((-1,1))
    #score = model.evaluate(test_x, test_y, batch_size=10)
    #plt.plot(history.history['loss'])
    #plt.show()
    '''plt.figure(figsize=(12,6))
    plot_series(time_train,x_train)
    plot_series(time_valid,x_valid)
    plot_series(time_test,x_test)
    plot_series(time_valid,prediction_2d)
    plt.show()
    '''#print(r2_score(x_valid,prediction_2d))
    print('valid',r2_score(x_valid,prediction_2d),'corr_valid',
        pd.Series(x_valid).corr(pd.Series(prediction_2d.reshape(-1,))),'diff_valid',
        pd.Series(diff(x_valid)).corr(pd.Series(diff(prediction_2d.reshape(-1,)))))
    return prediction_2d
def loss(true,pred):
    dl = pd.Series([])
    dl['rmspe'] = np.mean(rmspe(true,pred))
    dl['mse'] = mean_squared_error(true, pred)
    dl['mae'] = mean_absolute_error(true,pred)
    dl['evs'] = explained_variance_score(true,pred)
    dl['r2'] = r2_score(true,pred)
    return dl
##
data = np.linspace(1,1000, num=1000)
#series = np.exp(2*np.sin(0.05*data))*data + np.random.normal(0, 30, data.shape) * np.tanh(data) * np.sin(data)
series = np.sin(data*np.sin(data))+np.sin(data)+np.log(data+1) + (data/100)**2 + np.sin(data/70)*100
#np.sin(data*data*0.00001) + np.random.normal(0, 0.1, data.shape) + np.cos(0.2*data) + np.tanh(0.3*data) + np.exp(data*0.001)
#series = denoise(series,0)
#np.log(data+1)*np.sin((data+1)*0.09) #data
time = np.arange(0,len(series))
##
ticker = 'AAPL'
data = pdr.get_data_yahoo(ticker, start="2010-01-01", end="2040-04-30")
#data = data.tail(1000)
data = data.reset_index()[-1000:]
series = np.array(data['Close']) #diff
series = denoise(series,1)
time = np.arange(0,len(data['Date']))


##
np.random.seed(7)
dims = 1
step_n = 1000
step_set = [-20, 0, 20]
origin = np.zeros((1,dims))
# Simulate steps in 1D
step_shape = (step_n,dims)
steps = np.random.choice(a=step_set, size=step_shape)
#path = np.concatenate([origin, steps]).cumsum(0).reshape((-1,))
randomness = steps.cumsum(0).reshape((-1,))#+1e-1*series.reshape((10001,1))
randomness = running_mean(randomness,1) + 1000
trend = 50 * np.linspace(0,10, num=len(randomness)) + 30*np.sin(70*np.linspace(0,1, num=len(randomness))) + 1000
total = 0.1 * randomness + trend
horizon = 50
sondan = round(len(total),-2)
sondan = int(sondan - sondan%horizon)
sondan = round(len(total),-2)
total, trend, randomness = total[-sondan:] , trend[-sondan:] , randomness[-sondan:]
plt.plot(randomness, label = 'randomness')
plt.plot(trend, label = 'trend')
plt.plot(total, label = 'total')
plt.legend()
plt.show()
series = total
time = np.arange(0,len(series))
##
features = 1
horizon = 50
split_1 = len(series)-horizon*2
split_2 = len(series)-horizon

time_train = time[:split_1]
x_train = series[:split_1]
time_valid = time[split_1:split_2]
x_valid = series[split_1:split_2]
time_test = time[split_2:]
x_test = series[split_2:]
#x_valid = x_valid*0.1
time_train_val = time[:split_2]
x_train_val = series[:split_2]

plt.figure(figsize=(14,8))
plot_series(time_train,x_train)
plot_series(time_valid,x_valid)
plot_series(time_test,x_test)
plt.show()
##
sc = MinMaxScaler(feature_range=(0,1))
# define parameters
x_train_scaled = sc.fit_transform(x_train.reshape(-1,1))
x_valid_scaled = sc.transform(x_valid.reshape(-1,1))
x_test_scaled = sc.transform(x_test.reshape(-1,1))

# define parameters
'''x_train_scaled = x_train.reshape((-1,1))
x_valid_scaled = x_valid.reshape((-1,1))
x_test_scaled = x_test.reshape((-1,1))'''

n_input = 50
n_out = 50#len(x_valid)
#timestep = 100
x_train_scaled_3d = make_3d(x_train_scaled,n_out,1)
x_valid_scaled_3d = make_3d(x_valid_scaled,n_out,1)
#score , scores = evaluate_model(train,test,n_input)
train_x, train_y = to_supervised(x_train_scaled_3d, n_input, n_out)
train_x_2d = train_x.reshape((-1,50))[0:-50]

#n_timesteps, n_features, n_outputs = train_x.shape[1], train_x.shape[2], train_y.shape[1]
# reshape output into [samples, timesteps, features]
#train_y = train_y.reshape((train_y.shape[0], train_y.shape[1], 1))
train_y_2d = train_y[50:,0]
##



params = {'depth':[3,1,2,6,4,5,7,8,9,10],
          'iterations':[250,100,500,1000],
          'learning_rate':[0.03,0.001,0.01,0.1,0.2,0.3],
          'l2_leaf_reg':[3,1,5,10,100],
          'border_count':[32,5,10,20,50,100,200]}

##
reg1 = GradientBoostingRegressor(random_state=1)
reg2 = RandomForestRegressor(random_state=1)
reg3 = LinearRegression()
ereg = VotingRegressor(estimators=[('gb', reg1), ('rf', reg2), ('lr', reg3)])
##
models = [lr,svr,rf,h,dt,gb,cat,bag,knr]
losses = []
empty = np.zeros((50,1))
list = []
for i in models:
    list.append(str(i))
for model in models:
    print(model)
    pred = ml(model)
    losses.append(loss(x_valid,pred))
    empty = np.hstack((empty,pred))
##
aq = pd.DataFrame(losses, index = list)
df = pd.DataFrame(empty[:,1:], columns=list)
try:
    df['iyiler_mean'] = df[aq[aq['mse']<200].index].mean(axis=1)
    df['mean'] = df.mean(axis=1)
    aq = aq.T
    aq['iyiler_mean'] = loss(x_valid,df['iyiler_mean'])
    aq['mean'] = loss(x_valid,df['mean'])
    aq = aq.T
except:
    df['iyiler_mean'] = df.mean(axis=1)
    aq = aq.T
    aq['iyiler_mean'] = loss(x_valid, df['iyiler_mean'])
    aq['mean'] = loss(x_valid, df['mean'])

##
plt.figure(figsize=(12, 6))
plot_series(time_train, x_train)
plot_series(time_valid, x_valid)
plot_series(time_test, x_test)
#plot_series(time_valid, df['iyiler_mean'])
plot_series(time_valid, df['iyiler_mean'])
plt.show()
##
# Training classifiers

##
rs = RandomizedSearchCV(estimator=model, param_distributions = params,cv = 3, n_iter = 10, n_jobs=-1)
#grid = GridSearchCV(estimator=model, param_grid=params, cv=3, n_jobs=-1)
#grid.fit(train_x_2d, train_y_2d)
#print("\n The best estimator across ALL searched params:\n",
#      grid.best_estimator_)
#print("\n The best score across ALL searched params:\n",
#      grid.best_score_)
#print("\n The best parametegrid across ALL searched params:\n",
#      grid.best_params_)

rs.fit(train_x_2d, train_y_2d)
print("\n The best estimator across ALL searched params:\n",
      rs.best_estimator_)
print("\n The best score across ALL searched params:\n",
      rs.best_score_)
print("\n The best parameters across ALL searched params:\n",
      rs.best_params_)
model = CatBoostRegressor(learning_rate= 0.2, l2_leaf_reg= 1, iterations= 250, depth= 9, border_count= 10).fit(train_x_2d, train_y_2d)
last_window1 = train_y.reshape((800,50))[750:]
prediction_scaled = model.predict(last_window1)
prediction_2d = sc.inverse_transform(prediction_scaled.reshape((-1,1)))
plt.figure(figsize=(12,6))
plot_series(time_train,x_train)
plot_series(time_valid,x_valid)
plot_series(time_test,x_test)
plot_series(time_valid,prediction_2d)
plt.show()
print('valid',r2_score(x_valid,prediction_2d),'corr_valid',
    pd.Series(x_valid).corr(pd.Series(prediction_2d.reshape(-1,))),'diff_valid',
    pd.Series(diff(x_valid)).corr(pd.Series(diff(prediction_2d.reshape(-1,)))))


##
tf.keras.backend.clear_session()
tf.random.set_seed(7)
np.random.seed(7)
print('fit2/4')
n_input = 50
n_out = 50
x_train_val_scaled = x_train_val.reshape(-1,1)
x_train_val_scaled = sc.fit_transform(x_train_val_scaled)
#timestep = 100
x_train_val_scaled_3d = make_3d(x_train_val_scaled,n_out,1)
x_test_scaled_3d = make_3d(x_test_scaled,n_out,1)
#score , scores = evaluate_model(train,test,n_input)
train_val_x, train_val_y = to_supervised(x_train_val_scaled_3d, n_input, n_out)
train_x_2d = train_val_x.reshape((850,50))[0:800]
#[0:850]
train_y_2d = train_val_y[50:,0]
history = model.fit(train_x_2d, train_y_2d)
#timestep = 100
last_window2 = train_val_y.reshape((850,50))[800:]
prediction_scaled = model.predict(last_window2)
#np.append(x_train_scaled_3d[16],x_train_scaled_3d[17])
#np.append(x_train_val[-window_size+i:],forecast[:i])[np.newaxis]

pprediction_2d = sc.inverse_transform(prediction_scaled.reshape((-1,1)))

plt.figure(figsize=(12,6))
plot_series(time_train,x_train)
plot_series(time_valid,x_valid)
plot_series(time_test,x_test)
plot_series(time_valid,prediction_2d)
plot_series(time_test,pprediction_2d)
plt.show()
#print(tf.keras.metrics.mean_squared_error(x_valid, prediction_2d).numpy())
print('valid',r2_score(x_valid,prediction_2d),'test',r2_score(x_test,pprediction_2d),'\ncorr_valid',
    pd.Series(x_valid).corr(pd.Series(prediction_2d.reshape(-1,))),'corr_test',pd.Series(x_valid).corr(
    pd.Series(pprediction_2d.reshape(-1,))),'\ndiff_valid',pd.Series(diff(x_valid)).corr(pd.Series(diff(prediction_2d.reshape((-1,))))),
      'diff_test',pd.Series(diff(x_valid)).corr(pd.Series(diff(pprediction_2d.reshape((-1,))))))
##
'''EXTRAPOLATE'''
series_reshaped = series.reshape((-1,1))
series_scaled = sc.fit_transform(series_reshaped)
series_scaled_3d = make_3d(series_scaled,n_out,1)
test_x, test_y = to_supervised(series_scaled_3d, n_input, n_out)
last_window3 = test_y.reshape((900,50))[850:]
time_new = np.arange(time_test[-1],time_test[-1]+n_out)
ppprediction_scaled_2d = model.predict(last_window3)
ppprediction_2d = sc.inverse_transform(ppprediction_scaled_2d.reshape((-1,1)))
'''plot_series(time_train,x_train)
plot_series(time_valid,x_valid)
plot_series(time_test,x_test)'''
N = 31
a = N/2
b = -(N/2-1)
mov = running_mean(series,N)
time_mov = np.arange((int(len(series)-len(mov))/2),int(len(series)-int(len(series)-len(mov))/2))
plt.figure(figsize=(12,6))
plot_series(time_train,x_train)
plot_series(time_valid,x_valid)
plot_series(time_test,x_test)
plot_series(time_mov,mov)
plot_series(time_valid,prediction_2d)
plot_series(time_test,pprediction_2d)
plot_series(time_new,ppprediction_2d)
plt.show()

##

'''LSTM'''
'''valid 0.9623810094619425 test 0.8124706639451762
corr_valid 0.9976038386191789 corr_test -0.6696176051666543
diff_valid 0.9727168617252929 diff_test -0.37821635851459967'''
